package demo.model;


import demo.model.common.AppModule;

import java.math.BigDecimal;

import java.util.Date;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 04 10:41:53 CEST 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for UserTableView1.
     * @return UserTableView1
     */
    public ViewObjectImpl getUserTableView1() {
        return (ViewObjectImpl) findViewObject("UserTableView1");
    }

    /**
     * Container's getter for JobView1.
     * @return JobView1
     */
    public ViewObjectImpl getJobView1() {
        return (ViewObjectImpl) findViewObject("JobView1");
    }
    
    /**
     * Container's getter for DepartmentView1.
     * @return DepartmentView1
     */
    public ViewObjectImpl getDepartmentView1() {
        return (ViewObjectImpl) findViewObject("DepartmentView1");
    }
    
    /* create a new row */
    public void createRow(String idDepartment, String nameDepartment, Date fromDate, Date toDate) {
        
        Integer id = Integer.parseInt(idDepartment);
        ViewObject vo = findViewObject("DepartmentView1");
        Row row = vo.createRow();
        row.setAttribute("IdDepartment", id);
        row.setAttribute("NameDepartment", nameDepartment);
        row.setAttribute("Fromdate", fromDate);
        row.setAttribute("Todate", toDate);
        vo.insertRow(row);
        getDBTransaction().commit();
    }
    
    /* UPDATE with same row*/
    public void updateRow(String idDepartment, String nameDepartment) {
        
        /* INSERT new row */
        ViewObject vo = findViewObject("DepartmentView1");
        vo.setWhereClause("ID_DEPARTMENT="+idDepartment);
        vo.executeQuery();
        Row row = vo.first();
        row.setAttribute("NameDepartment", nameDepartment);
        getDBTransaction().commit();
    }
    
    /* EFFDT_UPDATE_MODE, this method create other row after the row that exist yet with other fromdate and other 
     * nameDepartment*/
    public void updateRowby_EFFDT_UPDATE_MODE(String idDepartment, String nameDepartment, Date effectiveDate) {
        ViewObject vo = findViewObject("DepartmentView1");
        setProperty(ApplicationModule.EFF_DT_PROPERTY_STR, effectiveDate);
        vo.setWhereClause("ID_DEPARTMENT='"+idDepartment+"'");
        vo.executeQuery();
        Row row  = vo.next();
        row.setEffectiveDateMode(Row.EFFDT_UPDATE_MODE);
        row.setAttribute("NameDepartment", nameDepartment);
        getDBTransaction().commit();
    }
    
    /* EFFDT_UPDATE_CORRECTION, this method correct the nameDeprtment and fromdate in the same row, without create 
     * other row */
    public void updateRowby_EFFDT_UPDATE_CORRECTION(String idDepartment, String nameDepartment, Date effectiveDate) {
        ViewObject vo = findViewObject("DepartmentView1");
        setProperty(ApplicationModule.EFF_DT_PROPERTY_STR, effectiveDate);
        vo.setWhereClause("ID_DEPARTMENT='"+idDepartment+"'");
        vo.executeQuery();
        Row row  = vo.next();
        row.setEffectiveDateMode(Row.EFFDT_UPDATE_CORRECTION);
        row.setAttribute("NameDepartment", nameDepartment);
        getDBTransaction().commit();
    }
    
    /* delete a row */
    public void deleteRow(String idDepartment) {
        ViewObject vo = findViewObject("DepartmentView1");
        vo.setWhereClause("ID_DEPARTMENT='"+idDepartment+"'");
        vo.executeQuery();
        Row row = vo.first();
        row.remove();
        getDBTransaction().commit();
    }

    /**
     * Container's getter for DepJobUserView1.
     * @return DepJobUserView1
     */
    public ViewObjectImpl getDepJobUserView1() {
        return (ViewObjectImpl) findViewObject("DepJobUserView1");
    }


    /**
     * Container's getter for JobUserUpdetableView1.
     * @return JobUserUpdetableView1
     */
    public ViewObjectImpl getJobUserUpdetableView1() {
        return (ViewObjectImpl) findViewObject("JobUserUpdetableView1");
    }
}

